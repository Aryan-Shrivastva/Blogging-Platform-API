services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: blogging-platform-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: blogging_platform
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - blogging-network

  # Node.js API Application
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: blogging-platform-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/blogging_platform?authSource=admin
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
    networks:
      - blogging-network
    volumes:
      - .:/app
      - /app/node_modules

  # MongoDB Admin Interface (optional)
  mongo-express:
    image: mongo-express:1.0.0-alpha
    container_name: blogging-platform-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password123
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - blogging-network

# Define volumes for data persistence
volumes:
  mongodb_data:
    driver: local

# Define networks
networks:
  blogging-network:
    driver: bridge